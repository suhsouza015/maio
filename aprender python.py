import streamlit as st
import random
import time # Para simular um tempo de carregamento em exemplo

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Curso de Python Interativo",
    page_icon="üêç",
    layout="wide" # Usa a largura m√°xima da tela
)

# --- Fun√ß√£o do M√≥dulo B√°sico ---
def modulo_basico():
    st.header("M√≥dulo B√°sico: Primeiros Passos em Python")
    st.write("Este m√≥dulo cobre os fundamentos essenciais da programa√ß√£o em Python, preparando voc√™ para construir l√≥gicas simples e entender como o Python funciona.")

    with st.expander("1. Vari√°veis e Tipos de Dados", expanded=True):
        st.write("""
        Em programa√ß√£o, **vari√°veis** s√£o como "caixas" nomeadas na mem√≥ria do computador que armazenam informa√ß√µes. Imagine que voc√™ est√° rotulando uma caixa para saber o que tem dentro dela mais tarde. Em Python, voc√™ n√£o precisa dizer qual tipo de coisa vai guardar na caixa (como n√∫mero, texto, etc.); o Python descobre isso automaticamente no momento da atribui√ß√£o. Isso √© chamado de **tipagem din√¢mica**. Al√©m disso, Python √© uma linguagem de **tipagem forte**, o que significa que ela n√£o far√° convers√µes de tipo impl√≠citas onde pode haver perda de dados ou comportamento inesperado (por exemplo, voc√™ n√£o pode somar um n√∫mero diretamente com um texto sem converter um deles).

        Os **tipos de dados** b√°sicos (ou "primitivos") em Python incluem:
        * **Inteiros (`int`)**: N√∫meros inteiros, positivos ou negativos, sem casas decimais. Usados para contagens, IDs, etc. (ex: `10`, `-5`, `1000000`).
        * **Floats (`float`)**: N√∫meros com casas decimais, representando valores reais. Essenciais para c√°lculos financeiros, medi√ß√µes, etc. (ex: `3.14`, `-0.5`, `2.0`).
        * **Strings (`str`)**: Sequ√™ncias de caracteres, como letras, palavras ou frases. S√£o sempre delimitadas por aspas simples (`'`) ou duplas (`"`). Usadas para manipular texto em geral.
        * **Booleanos (`bool`)**: Representam apenas dois valores: `True` (verdadeiro) ou `False` (falso). S√£o a base de toda a l√≥gica de decis√£o em programa√ß√£o.

        **Por que s√£o importantes?** Escolher o tipo de dado correto n√£o s√≥ otimiza o uso da mem√≥ria, mas tamb√©m garante que as opera√ß√µes realizadas sobre os dados sejam semanticamente corretas e eficientes.
        """)
        st.code("""
# Exemplo de vari√°veis e tipos de dados
nome = "Alice"           # String (texto entre aspas)
idade = 25               # Inteiro (n√∫mero sem ponto decimal)
altura = 1.68            # Float (n√∫mero com ponto decimal)
eh_estudante = True      # Booleano (Verdadeiro ou Falso)
preco_unitario = 49.99   # Float

print(f"Nome: {nome} (Tipo: {type(nome)})") # type() retorna o tipo da vari√°vel
print(f"Idade: {idade} (Tipo: {type(idade)})")
print(f"Altura: {altura} (Tipo: {type(altura)})")
print(f"√â estudante: {eh_estudante} (Tipo: {type(eh_estudante)})")
print(f"Pre√ßo: {preco_unitario} (Tipo: {type(preco_unitario)})")

# Reatribuindo uma vari√°vel (a caixa pode guardar outra coisa)
# Aten√ß√£o: Isso muda o tipo da vari√°vel 'idade' de int para str.
idade = "vinte e cinco"
print(f"Nova idade: {idade} (Tipo: {type(idade)})")

# Convers√£o de tipos (Type Casting)
# √Äs vezes, voc√™ precisa explicitamente mudar o tipo de uma vari√°vel.
numero_como_texto = "123"
numero_inteiro = int(numero_como_texto) # Converte string para inteiro
print(f"N√∫mero como texto: {numero_como_texto} (Tipo: {type(numero_como_texto)})")
print(f"N√∫mero inteiro: {numero_inteiro} (Tipo: {type(numero_inteiro)})")

# float para int trunca a parte decimal, n√£o arredonda
pi_arredondado = int(3.99)
print(f"int(3.99): {pi_arredondado}") # Sa√≠da: 3

""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Use nomes de vari√°veis descritivos (ex: `nome_cliente` em vez de `nc`).
        * Siga as conven√ß√µes do Python: nomes de vari√°veis e fun√ß√µes em `snake_case` (min√∫sculas com underscores).
        * Evite usar palavras reservadas do Python (como `if`, `for`, `class`) como nomes de vari√°veis.

        **Erro Comum:** Tentar operar com tipos de dados incompat√≠veis sem convers√£o, como `5 + "ol√°"`, o que resultaria em um `TypeError`.
        """)
        st.write("---")

    with st.expander("2. Operadores Aritm√©ticos e L√≥gicos"):
        st.write("""
        **Operadores aritm√©ticos** s√£o s√≠mbolos usados para realizar c√°lculos matem√°ticos. Eles seguem a tradicional **ordem de preced√™ncia** (similar ao PEMDAS/BODMAS): Par√™nteses, Expoentes, Multiplica√ß√£o e Divis√£o (da esquerda para a direita), Adi√ß√£o e Subtra√ß√£o (da esquerda para a direita). Compreender essa ordem √© crucial para evitar erros l√≥gicos em seus c√°lculos.

        **Operadores de compara√ß√£o** (`==`, `!=`, `<`, `<=`, `>`, `>=`) s√£o usados para comparar dois valores e sempre retornam um valor booleano (`True` ou `False`).

        **Operadores l√≥gicos** (`and`, `or`, `not`) s√£o usados para combinar ou inverter express√µes booleanas, ajudando a construir condi√ß√µes mais complexas em suas tomadas de decis√£o. Eles s√£o a espinha dorsal de qualquer fluxo de controle.
        """)
        st.markdown("""
        * **Aritm√©ticos:**
            * `+` : Adi√ß√£o (ex: `5 + 3` resulta `8`)
            * `-` : Subtra√ß√£o (ex: `10 - 4` resulta `6`)
            * `*` : Multiplica√ß√£o (ex: `2 * 7` resulta `14`)
            * `/` : Divis√£o (sempre retorna um `float`, ex: `7 / 2` resulta `3.5`)
            * `//` : Divis√£o inteira (descarta a parte decimal, ex: `7 // 2` resulta `3`)
            * `%` : M√≥dulo (retorna o resto da divis√£o, ex: `7 % 2` resulta `1`)
            * `**` : Potencia√ß√£o (ex: `2 ** 3` resulta `8`, 2 elevado a 3)
        * **Compara√ß√£o:**
            * `==` : Igual a (ex: `5 == 5` √© `True`, `5 == 6` √© `False`)
            * `!=` : Diferente de (ex: `5 != 6` √© `True`)
            * `<` : Menor que
            * `<=` : Menor ou igual a
            * `>` : Maior que
            * `>=` : Maior ou igual a
        * **L√≥gicos:**
            * `and` : Retorna `True` se *ambas* as condi√ß√µes forem verdadeiras. Usado quando todas as condi√ß√µes precisam ser satisfeitas.
            * `or` : Retorna `True` se *pelo menos uma* das condi√ß√µes for verdadeira. Usado quando qualquer uma das condi√ß√µes √© suficiente.
            * `not` : Inverte o valor booleano ( `not True` √© `False`, `not False` √© `True`). Usado para negar uma condi√ß√£o.
        """)
        st.code("""
# Operadores aritm√©ticos em a√ß√£o
x = 20
y = 7

print(f"x + y = {x + y}")        # Adi√ß√£o: 27
print(f"x - y = {x - y}")        # Subtra√ß√£o: 13
print(f"x * y = {x * y}")        # Multiplica√ß√£o: 140
print(f"x / y = {x / y}")        # Divis√£o (float): 2.857...
print(f"x // y = {x // y}")      # Divis√£o inteira: 2
print(f"x % y = {x % y}")        # M√≥dulo (resto): 6 (20 = 2*7 + 6)
print(f"x ** 2 = {x ** 2}")      # Potencia√ß√£o: 400 (20 elevado a 2)

# Exemplo de preced√™ncia: Multiplica√ß√£o/divis√£o antes de adi√ß√£o/subtra√ß√£o
calculo = 5 + 3 * 2 # √â 5 + (3 * 2) = 5 + 6 = 11, n√£o (5 + 3) * 2 = 16
print(f"Resultado de 5 + 3 * 2 = {calculo}")

# Operadores de Compara√ß√£o em a√ß√£o
print(f"x == y? {x == y}")   # False (20 n√£o √© igual a 7)
print(f"x > y? {x > y}")     # True (20 √© maior que 7)
print(f"x != y? {x != y}")   # True (20 √© diferente de 7)

# Operadores l√≥gicos em a√ß√£o
tem_permissao = True
idade_minima = 18
minha_idade = 20

# Usando 'and': Precisa ser maior ou igual a 18 E ter permiss√£o
pode_entrar = (minha_idade >= idade_minima) and tem_permissao
print(f"Pode entrar (idade >= 18 e permiss√£o)? {pode_entrar}") # True (ambas as condi√ß√µes s√£o True)

tem_ingresso = False
tem_convite = True

# Usando 'or': Precisa ter ingresso OU convite
pode_assistir = tem_ingresso or tem_convite
print(f"Pode assistir (ingresso ou convite)? {pode_assistir}") # True (pelo menos uma condi√ß√£o √© True)

# Usando 'not': Inverte o valor booleano
tem_dinheiro = False
nao_tem_dinheiro = not tem_dinheiro
print(f"N√£o tem dinheiro? {nao_tem_dinheiro}") # True (inverte False para True)

# Combinando operadores: Cuidado com par√™nteses para clareza e preced√™ncia
condicao_complexa = (minha_idade > 25 and tem_permissao) or tem_convite
print(f"Condi√ß√£o complexa: {condicao_complexa}") # (False and True) or True = False or True = True
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Use par√™nteses para agrupar opera√ß√µes complexas e deixar a inten√ß√£o clara, mesmo que a preced√™ncia j√° garanta o resultado desejado. Isso melhora a legibilidade.
        * N√£o confunda `=` (atribui√ß√£o) com `==` (compara√ß√£o de igualdade).

        **Erro Comum:** Esquecer a preced√™ncia de operadores, levando a resultados inesperados em c√°lculos complexos.
        """)
        st.write("---")

    with st.expander("3. Entrada de Dados (`input()`) e Formata√ß√£o de Strings (f-strings)"):
        st.write("""
        Para que seus programas sejam interativos, muitas vezes voc√™ precisar√° obter informa√ß√µes do usu√°rio. A fun√ß√£o `input()` faz exatamente isso: ela pausa o programa, exibe uma mensagem no console e espera que o usu√°rio digite algo, retornando essa entrada sempre como uma **string**. Mesmo que o usu√°rio digite um n√∫mero, `input()` o ler√° como texto, e voc√™ precisar√° convert√™-lo (com `int()` ou `float()`) se quiser realizar opera√ß√µes num√©ricas.

        Quando voc√™ quer exibir informa√ß√µes combinando texto est√°tico e valores de vari√°veis de forma elegante e eficiente, as **f-strings** (formatted string literals) s√£o a melhor ferramenta em Python 3.6+. Elas permitem que voc√™ incorpore express√µes Python (vari√°veis, chamadas de fun√ß√£o simples, etc.) diretamente dentro de strings, prefixando a string com um `f` ou `F`. Isso as torna muito mais leg√≠veis e concisas do que m√©todos de formata√ß√£o mais antigos como `%` ou `.format()`.
        """)
        st.code("""
# Usando input() para obter dados do usu√°rio
# Observa√ß√£o: 'input()' s√≥ funciona no console/terminal, n√£o em interfaces web como Streamlit diretamente.
# Voc√™ usar√° st.text_input no Streamlit para essa finalidade.

# Formata√ß√£o de strings com f-strings (o 'f' antes das aspas √© crucial!)
produto = "Notebook Gamer"
preco = 7500.50
desconto = 0.10 # 10%

preco_final = preco * (1 - desconto)

# Formata√ß√£o de float para 2 casas decimais com ': .2f'
print(f"O produto '{produto}' custa R${preco:.2f}.") # :.2f formata para 2 casas decimais

# Formata√ß√£o de float como porcentagem com ': .0%'
print(f"Com um desconto de {desconto:.0%}, o pre√ßo final √© R${preco_final:.2f}.") # :.0% formata como porcentagem sem casas decimais

# F-strings s√£o poderosas para combinar diferentes tipos e express√µes
minha_idade = 30
print(f"Eu tenho {minha_idade} anos e no ano que vem terei {minha_idade + 1} anos.")

# Alinhamento e preenchimento
nome_aluno = "Ana"
nota = 9.5
print(f"|{nome_aluno:<10}|{nota:^5.1f}|") # Alinha √† esquerda (10 chars), centraliza (5 chars, 1 decimal)
# Sa√≠da no terminal: |Ana        | 9.5 |
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Sempre use f-strings para formata√ß√£o de strings em c√≥digo moderno Python.
        * Ap√≥s coletar entrada com `st.text_input` no Streamlit, use `int()`, `float()`, etc., para converter para o tipo num√©rico adequado antes de realizar opera√ß√µes matem√°ticas.

        **Erro Comum:** Esquecer de converter a entrada do `input()` (ou `st.text_input`) para um tipo num√©rico ao tentar fazer c√°lculos, resultando em `TypeError` (e.g., `ValueError` se a convers√£o falhar, como `int("abc")`).
        """)
        st.write("---")

    with st.expander("4. Estruturas Condicionais (`if`/`elif`/`else`)"):
        st.write("""
        As **estruturas condicionais** s√£o o que permitem que seu programa "tome decis√µes" e execute diferentes blocos de c√≥digo com base em certas condi√ß√µes. Elas s√£o a base para criar l√≥gica de ramifica√ß√£o em seus programas. Uma condi√ß√£o √© uma express√£o que resulta em `True` ou `False` (um booleano).

        * **`if`**: O bloco de c√≥digo sob o `if` s√≥ √© executado se a condi√ß√£o for `True`. √â o ponto de partida de qualquer cadeia condicional.
        * **`elif` (else if)**: Se a condi√ß√£o `if` for `False`, o programa verifica a condi√ß√£o do `elif` seguinte. Voc√™ pode ter m√∫ltiplos `elif` para testar v√°rias condi√ß√µes sequencialmente. O primeiro `elif` cuja condi√ß√£o for `True` ter√° seu bloco executado, e o resto da cadeia ser√° ignorado.
        * **`else`**: Se *todas* as condi√ß√µes `if` e `elif` anteriores forem `False`, o bloco `else` √© executado. O `else` √© opcional e serve como uma "captura" para qualquer caso que n√£o se encaixe nas condi√ß√µes anteriores.

        A **indenta√ß√£o** (espa√ßamento no in√≠cio da linha, geralmente 4 espa√ßos) √© crucial em Python! Ela define os blocos de c√≥digo pertencentes a cada `if`, `elif` ou `else`. Python usa indenta√ß√£o para delimitar blocos, enquanto outras linguagens podem usar chaves `{}`.

        **Por que s√£o importantes?** Sem condicionais, seu programa seguiria sempre o mesmo caminho. Elas permitem criar programas que respondem a diferentes entradas, estados ou situa√ß√µes, tornando-os din√¢micos e √∫teis.
        """)
        st.code("""
# Exemplo: Verificando a faixa et√°ria e dando recomenda√ß√µes
idade_visitante = 17

if idade_visitante >= 18:
    print("Voc√™ √© maior de idade. Acesso liberado para todas as √°reas.")
elif idade_visitante >= 13: # Se n√£o for >= 18, verifica se √© >= 13
    print("Voc√™ √© adolescente. Acesso com restri√ß√µes para algumas √°reas.")
else: # Se n√£o for nem >= 18 nem >= 13
    print("Voc√™ √© crian√ßa. Acesso negado, necess√°rio acompanhamento de adulto.")

# Exemplo com uma √∫nica condi√ß√£o
chovendo = True
if chovendo: # √â o mesmo que 'if chovendo == True:' - mais conciso
    print("Leve um guarda-chuva!")
    print("Considere usar galochas.") # M√∫ltiplas linhas dentro do bloco

# Exemplo com 'not' na condi√ß√£o
saldo = 500
compra = 600
# if not (saldo >= compra): significa "Se n√£o for verdade que saldo √© maior ou igual √† compra"
if not (saldo >= compra):
    print("Saldo insuficiente para a compra.")
else:
    print("Compra realizada com sucesso!")

# M√∫ltiplas condi√ß√µes na mesma linha com operadores l√≥gicos
# Apenas entra se a idade estiver entre 18 e 60 (inclusive)
idade_candidato = 25
if idade_candidato >= 18 and idade_candidato <= 60:
    print("Candidato eleg√≠vel pela idade.")

# Se for jovem ou idoso, oferece desconto
if idade_candidato < 18 or idade_candidato > 60:
    print("Cliente tem direito a desconto especial.")
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Mantenha suas condi√ß√µes claras e concisas. Se uma condi√ß√£o se tornar muito complexa, considere dividi-la em vari√°veis booleanas intermedi√°rias para melhorar a legibilidade.
        * Use `elif` para cadeias de condi√ß√µes mutuamente exclusivas para evitar que o Python verifique condi√ß√µes desnecessariamente.
        * Sempre se atente √† indenta√ß√£o! √â a fonte de muitos erros de l√≥gica para iniciantes.

        **Erro Comum:** Erros de indenta√ß√£o, que podem levar a `IndentationError` ou, pior, a um c√≥digo que executa sem erro mas com l√≥gica incorreta porque um bloco n√£o est√° onde deveria.
        """)
        st.write("---")

    with st.expander("5. Estruturas de Repeti√ß√£o (`for`/`while`)"):
        st.write("""
        As **estruturas de repeti√ß√£o** (ou la√ßos/loops) s√£o ferramentas poderosas que permitem que voc√™ execute um bloco de c√≥digo v√°rias vezes. Isso √© fundamental para automatizar tarefas repetitivas, processar cole√ß√µes de dados e simular comportamentos cont√≠nuos.

        * **`for` loop**: √â usado para iterar (percorrer) sobre uma **sequ√™ncia** (como uma string, lista, tupla, ou um `range` de n√∫meros) ou outros objetos "iter√°veis". Ele executa o bloco de c√≥digo uma vez para cada item na sequ√™ncia, atribuindo o item atual a uma vari√°vel tempor√°ria em cada itera√ß√£o.
            * `range(n)`: Gera uma sequ√™ncia de n√∫meros de 0 at√© `n-1`. Ideal para repetir um bloco de c√≥digo um n√∫mero fixo de vezes.
            * `range(inicio, fim)`: Gera de `inicio` (inclusive) at√© `fim-1` (exclusive).
            * `range(inicio, fim, passo)`: Gera de `inicio` at√© `fim-1` pulando `passo`. `passo` pode ser negativo para contagem regressiva.
        * **`while` loop**: Continua executando o bloco de c√≥digo *enquanto* uma determinada condi√ß√£o for verdadeira. √â ideal quando voc√™ n√£o sabe de antem√£o quantas vezes o loop precisa rodar; a repeti√ß√£o depende de uma condi√ß√£o que muda durante a execu√ß√£o.
            * √â crucial garantir que a condi√ß√£o se torne falsa em algum momento, caso contr√°rio, voc√™ ter√° um **loop infinito**, fazendo com que seu programa trave ou consuma muitos recursos!

        Assim como nas condicionais, a **indenta√ß√£o** √© crucial para definir o que est√° dentro do loop.

        **Palavras-chave √∫teis em loops:**
        * `break`: Sai do loop imediatamente, independentemente da condi√ß√£o do loop. √ötil para terminar um loop quando uma condi√ß√£o espec√≠fica √© atingida.
        * `continue`: Pula o restante do c√≥digo do bloco atual do loop e vai para a pr√≥xima itera√ß√£o. √ötil para ignorar certos itens ou situa√ß√µes dentro de um loop.

        **Por que s√£o importantes?** Loops permitem que voc√™ trabalhe com grandes volumes de dados (ex: processar todos os itens em uma lista), implemente algoritmos de busca e ordena√ß√£o, e crie jogos ou simula√ß√µes onde a√ß√µes se repetem.
        """)
        st.code("""
# Loop 'for' com uma lista: Processando cada item
ingredientes = ["farinha", "a√ß√∫car", "ovos", "leite"]
print("Ingredientes para o bolo:")
for item in ingredientes: # 'item' assume o valor de cada elemento da lista, um por vez
    print(f"- {item}")

# Loop 'for' com range (para repetir um n√∫mero fixo de vezes)
print("\\nContagem regressiva:")
for i in range(5, 0, -1): # Come√ßa em 5, vai at√© 1 (0 n√£o incluso), decrementa 1
    print(i)
print("Decolar!")

# Loop 'for' com 'enumerate': Para acessar o item e seu √≠ndice
print("\\nItens com seus √≠ndices:")
for index, fruta in enumerate(["ma√ß√£", "banana", "cereja"]):
    print(f"√çndice {index}: {fruta}")

# Loop 'while': Senha com tentativas limitadas (simulada para Streamlit)
# Em um app real, st.text_input ou similar seria usado em vez de simula√ß√£o
tentativas_senha = 0
senha_correta = "segredo123"
simular_entrada_senha = ""

st.subheader("Simula√ß√£o de Loop 'While' (Senha)")
st.write("Imagine que voc√™ est√° digitando a senha. Este exemplo usa um loop `while`.")
placeholder_senha = st.empty() # Placeholder para o print din√¢mico

while tentativas_senha < 3:
    simular_entrada_senha = placeholder_senha.text_input(
        f"Tentativa {tentativas_senha + 1} de 3: Digite a senha (dica: segredo123)",
        key=f"senha_input_{tentativas_senha}"
    )
    if simular_entrada_senha: # S√≥ processa se algo foi digitado
        if simular_entrada_senha == senha_correta:
            st.success("Senha correta! Acesso concedido.")
            break # Sai do loop
        else:
            st.warning("Senha incorreta. Tente novamente.")
        tentativas_senha += 1
    time.sleep(0.1) # Pequena pausa para evitar sobrecarga no Streamlit

if tentativas_senha >= 3 and simular_entrada_senha != senha_correta:
    st.error("N√∫mero m√°ximo de tentativas atingido. Acesso negado.")

st.write("---")

# Exemplo de 'continue': Pulando n√∫meros pares
print("\\nN√∫meros √≠mpares de 1 a 10 (no terminal):")
for numero in range(1, 11):
    if numero % 2 == 0: # Se o n√∫mero for par...
        continue # ...pula para a pr√≥xima itera√ß√£o do loop, sem executar o print abaixo
    print(numero) # Este print aparecer√° no terminal

st.write("---")
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Use `for` loops quando souber o n√∫mero de itera√ß√µes (ou quando estiver iterando sobre uma cole√ß√£o finita).
        * Use `while` loops quando o n√∫mero de itera√ß√µes for desconhecido e depender de uma condi√ß√£o ser satisfeita.
        * Sempre garanta que a condi√ß√£o de um `while` loop eventualmente se tornar√° falsa para evitar loops infinitos.
        * Aproveite `enumerate()` para acessar tanto o item quanto seu √≠ndice em `for` loops.

        **Erro Comum:** Loops infinitos (`while True:` sem uma condi√ß√£o de `break` interna) ou erros de `Off-by-one` (`range(5)` vai de 0 a 4, n√£o a 5).
        """)
        st.write("---")

    st.subheader("Exerc√≠cio Interativo: Verificador de Par ou √çmpar")
    st.write("Digite um n√∫mero inteiro no campo abaixo para verificar se ele √© par ou √≠mpar. Observe como o c√≥digo usa operadores aritm√©ticos (o operador de m√≥dulo `%`) e condicionais (`if`/`else`) para tomar essa decis√£o.")
    numero_str = st.text_input("Digite um n√∫mero inteiro:", key="ex1_basico")
    if numero_str:
        try:
            numero = int(numero_str)
            if numero % 2 == 0: # O operador % (m√≥dulo) retorna o resto da divis√£o. Se o resto da divis√£o por 2 for 0, √© par.
                st.success(f"O n√∫mero {numero} √© **PAR**.")
            else:
                st.info(f"O n√∫mero {numero} √© **√çMPAR**.")
        except ValueError:
            st.error("Ops! Isso n√£o parece um n√∫mero inteiro. Por favor, digite apenas d√≠gitos num√©ricos.")
    st.write("---")

# --- Fun√ß√£o do M√≥dulo Intermedi√°rio ---
def modulo_intermediario():
    st.header("M√≥dulo Intermedi√°rio: Aprofundando em Python")
    st.write("Este m√≥dulo aprofunda seu conhecimento em Python, apresentando conceitos que permitem organizar e otimizar seu c√≥digo, al√©m de lidar com dados de forma mais eficiente.")

    with st.expander("1. Fun√ß√µes", expanded=True):
        st.write("""
        **Fun√ß√µes** s√£o blocos de c√≥digo reutiliz√°veis que realizam uma tarefa espec√≠fica. Pense nelas como pequenas "m√°quinas" que voc√™ pode chamar a qualquer momento para fazer um trabalho, sem precisar reescrever o mesmo c√≥digo. Elas s√£o a espinha dorsal de um c√≥digo bem organizado e s√£o essenciais para:
        * **Organiza√ß√£o do c√≥digo**: Dividir seu programa em partes menores e gerenci√°veis, facilitando a leitura e a manuten√ß√£o.
        * **Reutiliza√ß√£o**: Evitar a repeti√ß√£o de c√≥digo (Princ√≠pio DRY - **D**on't **R**epeat **Y**ourself), o que torna o c√≥digo mais eficiente e menos propenso a erros.
        * **Modularidade**: Tornar o c√≥digo mais f√°cil de entender, testar individualmente (unit testing) e depurar, pois cada fun√ß√£o tem uma responsabilidade clara.
        * **Abstra√ß√£o**: Esconder a complexidade interna de uma opera√ß√£o, expondo apenas o que √© necess√°rio para us√°-la.

        Para definir uma fun√ß√£o, usamos a palavra-chave `def`, seguida do nome da fun√ß√£o, par√™nteses (que podem conter **par√¢metros**), e dois pontos (`:`). O corpo da fun√ß√£o (o c√≥digo que ela executa) √© indentado. A palavra-chave `return` √© usada para enviar um ou mais valores de volta ao ponto onde a fun√ß√£o foi chamada. Se uma fun√ß√£o n√£o tem um `return` expl√≠cito, ela implicitamente retorna `None`.

        **Par√¢metros vs. Argumentos:**
        * **Par√¢metros**: S√£o os nomes das vari√°veis listadas na defini√ß√£o da fun√ß√£o (ex: `nome`, `saudacao` em `def saudar_usuario(nome, saudacao)`).
        * **Argumentos**: S√£o os valores reais passados para a fun√ß√£o quando ela √© chamada (ex: `"Carlos"`, `"Oi"` em `saudar_usuario("Carlos", "Oi")`).
        """)
        st.code("""
# Definindo uma fun√ß√£o sem par√¢metros e sem retorno (apenas executa uma a√ß√£o)
def exibir_mensagem_boas_vindas():
    print("Bem-vindo ao mundo das fun√ß√µes em Python!")

exibir_mensagem_boas_vindas() # Chamando a fun√ß√£o para execut√°-la

# Definindo uma fun√ß√£o com par√¢metros e com retorno
# 'saudacao="Ol√°"' define um par√¢metro com valor padr√£o.
# Se o chamador n√£o fornecer um valor para 'saudacao', "Ol√°" ser√° usado.
def saudar_usuario(nome, saudacao="Ol√°"):
    mensagem = f"{saudacao}, {nome}!"
    return mensagem # Retorna a string resultante

# Chamando a fun√ß√£o com diferentes argumentos
mensagem1 = saudar_usuario("Carlos") # Usa o valor padr√£o para 'saudacao'
print(mensagem1) # Sa√≠da: Ol√°, Carlos!

mensagem2 = saudar_usuario("Maria", "Oi") # Passando um valor expl√≠cito para 'saudacao'
print(mensagem2) # Sa√≠da: Oi, Maria!

# Fun√ß√µes podem ter m√∫ltiplos retornos (retornam uma tupla)
def calcular_operacoes(a, b):
    soma = a + b
    subtracao = a - b
    multiplicacao = a * b
    return soma, subtracao, multiplicacao # Retorna uma tupla de valores

# Desempacotando os m√∫ltiplos retornos em vari√°veis separadas
resultado_soma, resultado_subtracao, resultado_multiplicacao = calcular_operacoes(10, 5)
print(f"Soma: {resultado_soma}, Subtra√ß√£o: {resultado_subtracao}, Multiplica√ß√£o: {resultado_multiplicacao}")

# Argumentos nomeados (Keyword Arguments) - Melhoram a legibilidade
print(saudar_usuario(nome="Pedro", saudacao="Bom dia"))
print(saudar_usuario(saudacao="Boa noite", nome="Ana")) # A ordem n√£o importa com argumentos nomeados
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Cada fun√ß√£o deve ter uma **√∫nica responsabilidade** (Princ√≠pio da Responsabilidade √önica).
        * Use nomes de fun√ß√µes descritivos (verbos) que indiquem o que a fun√ß√£o faz (ex: `calcular_media`, `gerar_relatorio`).
        * Documente suas fun√ß√µes usando **docstrings** (strings de documenta√ß√£o de m√∫ltiplas linhas logo abaixo da defini√ß√£o da fun√ß√£o) para explicar o que a fun√ß√£o faz, seus par√¢metros e o que ela retorna.
        * Limite o n√∫mero de par√¢metros para manter a fun√ß√£o simples e f√°cil de usar.

        **Erro Comum:** Esquecer os par√™nteses ao chamar uma fun√ß√£o (o que a referenciaria como um objeto, em vez de execut√°-la) ou tentar acessar vari√°veis definidas dentro de uma fun√ß√£o fora dela (elas t√™m escopo local).
        """)
        st.write("---")

    with st.expander("2. Listas, Tuplas, Dicion√°rios e Conjuntos"):
        st.write("""
        Python oferece diversas **estruturas de dados** embutidas, cada uma com suas caracter√≠sticas e usos espec√≠ficos, para organizar e armazenar cole√ß√µes de informa√ß√µes. A escolha da estrutura de dados correta √© fundamental para a efici√™ncia e clareza do seu c√≥digo.

        * **Listas (`list`)**:
            * Cole√ß√µes **ordenadas** de itens (a ordem de inser√ß√£o √© mantida).
            * S√£o **mut√°veis**, ou seja, voc√™ pode adicionar, remover, modificar ou reordenar itens ap√≥s a cria√ß√£o.
            * Permitem itens duplicados e podem conter itens de diferentes tipos de dados.
            * Definidas com colchetes `[]`.
            * **Uso Ideal**: Quando voc√™ precisa de uma cole√ß√£o flex√≠vel de itens que pode mudar ao longo do tempo, como uma lista de compras ou resultados de uma query.
        * **Tuplas (`tuple`)**:
            * Cole√ß√µes **ordenadas** de itens (a ordem de inser√ß√£o √© mantida).
            * S√£o **imut√°veis**, o que significa que, uma vez criadas, voc√™ n√£o pode alterar seus itens (adicionar, remover ou modificar).
            * Permitem itens duplicados e de diferentes tipos de dados.
            * Definida com par√™nteses `()`.
            * **Uso Ideal**: Para dados que n√£o devem mudar, como coordenadas geogr√°ficas, configura√ß√µes fixas, ou para retornar m√∫ltiplos valores de uma fun√ß√£o.
        * **Dicion√°rios (`dict`)**:
            * Cole√ß√µes **ordenadas** (a partir do Python 3.7+ mant√™m a ordem de inser√ß√£o) de pares **chave-valor**.
            * Cada item √© um par `chave: valor`. As **chaves** devem ser √∫nicas e **imut√°veis** (geralmente strings, n√∫meros ou tuplas). Os valores podem ser de qualquer tipo.
            * S√£o **mut√°veis**.
            * Definidos com chaves `{}`.
            * **Uso Ideal**: Para representar dados onde voc√™ precisa associar um valor a um nome ou identificador √∫nico (como um cadastro de usu√°rio, ou configura√ß√µes de um objeto).
        * **Conjuntos (`set`)**:
            * Cole√ß√µes **n√£o ordenadas** de itens **√∫nicos**.
            * Automaticamente removem duplicatas.
            * S√£o **mut√°veis**.
            * Definidos com chaves `{}`, mas sem pares chave-valor. Para criar um conjunto vazio, use `set()` (pois `{}` cria um dicion√°rio vazio).
            * **Uso Ideal**: Para armazenar uma cole√ß√£o de itens √∫nicos, testar a presen√ßa de um item de forma muito eficiente, ou realizar opera√ß√µes matem√°ticas de conjuntos (uni√£o, interse√ß√£o, diferen√ßa).

        **Acesso a Elementos:**
        * Listas e Tuplas: Usam **√≠ndices num√©ricos** (come√ßando do 0) dentro de colchetes. Ex: `minha_lista[0]`. √çndices negativos contam a partir do final (`-1` √© o √∫ltimo elemento).
        * Dicion√°rios: Usam as **chaves** dentro de colchetes. Ex: `meu_dicionario['chave']`.
        * Conjuntos: N√£o possuem ordem nem acesso por √≠ndice ou chave. Voc√™ apenas verifica a presen√ßa de um elemento.
        """)
        st.code("""
# Exemplos detalhados de estruturas de dados

# --- Listas: Flex√≠veis e comuns ---
frutas = ["ma√ß√£", "banana", "laranja", "ma√ß√£", "abacaxi"] # Lista com duplicata
print(f"Lista original: {frutas}")
print(f"Primeira fruta (√≠ndice 0): {frutas[0]}")
print(f"√öltima fruta (√≠ndice -1): {frutas[-1]}")

frutas.append("uva") # Adiciona um item no final
print(f"Lista ap√≥s append('uva'): {frutas}")
frutas.insert(1, "kiwi") # Insere 'kiwi' no √≠ndice 1 (desloca outros itens)
print(f"Lista ap√≥s insert(1, 'kiwi'): {frutas}")
frutas.remove("ma√ß√£") # Remove a *primeira* ocorr√™ncia do valor "ma√ß√£"
print(f"Lista ap√≥s remove('ma√ß√£'): {frutas}")
ultima_fruta_removida = frutas.pop() # Remove e retorna o *√∫ltimo* item
print(f"√öltima fruta removida com pop(): {ultima_fruta_removida}, Lista atualizada: {frutas}")
print(f"Tamanho da lista: {len(frutas)}") # len() retorna o n√∫mero de elementos

# --- Tuplas: Para dados fixos ---
coordenadas = (10.5, 20.3, 5.0) # Tupla de coordenadas (latitude, longitude, altitude)
print(f"Coordenadas: {coordenadas}")
print(f"Latitude: {coordenadas[0]}, Longitude: {coordenadas[1]}")
# coordenadas[0] = 11.0 # Isso causaria um erro (TypeError)! Tuplas s√£o imut√°veis.

# --- Dicion√°rios: Para dados com r√≥tulos (chaves) ---
pessoa = {
    "nome": "Jo√£o Silva",
    "idade": 30,
    "cidade": "Rio de Janeiro",
    "profissao": "Engenheiro"
}
print(f"Dicion√°rio original: {pessoa}")
print(f"Nome da pessoa: {pessoa['nome']}") # Acessa o valor associado √† chave 'nome'

pessoa["idade"] = 31 # Altera o valor de uma chave existente
pessoa["email"] = "joao.silva@email.com" # Adiciona um novo par chave-valor
print(f"Dicion√°rio atualizado: {pessoa}")

# Verificando se uma chave existe
if "profissao" in pessoa:
    print(f"Profiss√£o: {pessoa['profissao']}")

# Usando .get() para acessar valores (evita KeyError se a chave n√£o existir)
telefone = pessoa.get("telefone", "N√£o informado") # Se 'telefone' n√£o existe, retorna "N√£o informado"
print(f"Telefone: {telefone}")

# Percorrendo um dicion√°rio
print("\\nIterando sobre o dicion√°rio:")
for chave, valor in pessoa.items(): # .items() retorna pares chave-valor
    print(f"{chave.capitalize()}: {valor}") # .capitalize() deixa a primeira letra mai√∫scula

# --- Conjuntos: Para itens √∫nicos ---
numeros_duplicados = [1, 2, 2, 3, 4, 4, 5, 1]
conjunto_numeros = set(numeros_duplicados) # Converte lista para conjunto, removendo duplicatas
print(f"Lista com duplicatas: {numeros_duplicados}")
print(f"Conjunto de n√∫meros √∫nicos: {conjunto_numeros}")

conjunto_numeros.add(6) # Adiciona um item (se j√° existir, n√£o faz nada)
print(f"Conjunto ap√≥s adicionar 6: {conjunto_numeros}")
conjunto_numeros.remove(2) # Remove um item (causa KeyError se o item n√£o estiver presente)
print(f"Conjunto ap√≥s remover 2: {conjunto_numeros}")

# Testando pertencimento (muito r√°pido em conjuntos, O(1) em m√©dia)
if 3 in conjunto_numeros:
    print("O n√∫mero 3 est√° no conjunto.")
if 9 not in conjunto_numeros:
    print("O n√∫mero 9 N√ÉO est√° no conjunto.")

# Opera√ß√µes de conjunto
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
print(f"Uni√£o (set1 | set2): {set1 | set2}")         # Elementos presentes em set1 OU set2
print(f"Interse√ß√£o (set1 & set2): {set1 & set2}")    # Elementos presentes em set1 E set2
print(f"Diferen√ßa (set1 - set2): {set1 - set2}")      # Elementos em set1 MAS N√ÉO em set2
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Escolha a estrutura de dados mais adequada para o problema. Listas para cole√ß√µes ordenadas mut√°veis, tuplas para dados fixos, dicion√°rios para mapeamentos chave-valor, e conjuntos para cole√ß√µes de itens √∫nicos.
        * Para dicion√°rios, use `.get(chave, valor_padrao)` para acessar valores se houver chance de a chave n√£o existir, evitando `KeyError`.
        * Aproveite as opera√ß√µes de conjunto para eficientemente lidar com elementos √∫nicos e rela√ß√µes entre cole√ß√µes.

        **Erro Comum:** `IndexError` ao tentar acessar um √≠ndice que n√£o existe em listas/tuplas, ou `KeyError` ao tentar acessar uma chave que n√£o existe em dicion√°rios. Tentar modificar uma tupla.
        """)
        st.write("---")

    with st.expander("3. Manipula√ß√£o de Strings", expanded=True):
        st.write("""
        Strings s√£o sequ√™ncias de caracteres e, por serem t√£o fundamentais em quase todos os programas, Python oferece uma vasta gama de m√©todos para manipul√°-las de forma eficiente. Voc√™ pode combinar, dividir, substituir, formatar e muito mais.

        * **Imutabilidade**: Uma propriedade crucial das strings em Python √© que elas s√£o **imut√°veis**. Isso significa que, uma vez criada, uma string n√£o pode ser alterada. Qualquer opera√ß√£o que "modifique" uma string (como converter para mai√∫sculas) na verdade retorna uma **nova string**.
        """)
        st.code("""
texto = "Ol√°, Mundo Python!"

# M√©todos comuns de string:
print(f"Original: '{texto}'")
print(f"Mai√∫sculas: '{texto.upper()}'")
print(f"Min√∫sculas: '{texto.lower()}'")
print(f"Primeira letra mai√∫scula: '{texto.capitalize()}'") # Apenas a primeira letra da frase

# Substitui√ß√£o
novo_texto = texto.replace("Python", "Streamlit")
print(f"Substitu√≠do: '{novo_texto}'")

# Dividir string (split)
palavras = texto.split(" ") # Divide pelo espa√ßo em branco
print(f"Palavras (split): {palavras}")

# Juntar strings (join)
lista_de_palavras = ["Python", "√©", "incr√≠vel"]
frase_nova = " ".join(lista_de_palavras) # Junta as palavras com espa√ßo
print(f"Frase juntada: '{frase_nova}'")

# Verifica√ß√£o (startswith, endswith, in)
print(f"Come√ßa com 'Ol√°'? {texto.startswith('Ol√°')}")
print(f"Termina com '!'? {texto.endswith('!')}")
print(f"'Mundo' est√° em texto? {'Mundo' in texto}")

# Remover espa√ßos em branco (strip)
texto_com_espacos = "   ¬†Ol√°, espa√ßo!   "
print(f"Original com espa√ßos: '{texto_com_espacos}'")
print(f"Sem espa√ßos (strip): '{texto_com_espacos.strip()}'")

# Fatiamento (Slicing) - [inicio:fim:passo]
# Lembrar: o 'fim' √© exclusivo (n√£o inclu√≠do)
print(f"Primeiros 4 caracteres: '{texto[0:4]}'")
print(f"Do 5¬∫ ao 10¬∫ caracter: '{texto[4:10]}'")
print(f"Do 6¬∫ caracter at√© o final: '{texto[5:]}'")
print(f"Os √∫ltimos 5 caracteres: '{texto[-5:]}'")
print(f"Inverter string: '{texto[::-1]}'") # Passo negativo inverte
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Sempre se lembre da **imutabilidade** das strings. Os m√©todos retornam novas strings.
        * Use `strip()` para limpar entradas de usu√°rio de espa√ßos indesejados.
        * Explore a documenta√ß√£o para descobrir outros m√©todos √∫teis (ex: `isdigit()`, `isalpha()`, `count()`).

        **Erro Comum:** Tentar modificar uma string no lugar (ex: `minha_string.upper()` n√£o muda `minha_string`, voc√™ precisa `minha_string = minha_string.upper()`).
        """)
        st.write("---")

    with st.expander("4. Classes e Objetos (Programa√ß√£o Orientada a Objetos - POO)"):
        st.write("""
        A **Programa√ß√£o Orientada a Objetos (POO)** √© um paradigma de programa√ß√£o que organiza o c√≥digo em torno de **objetos**, em vez de apenas fun√ß√µes e l√≥gica. Ela visa modelar entidades do mundo real ou conceitos abstratos, tornando o c√≥digo mais modular, reutiliz√°vel e f√°cil de manter.

        Os conceitos chave da POO s√£o:
        * **Classe**: √â um "molde" ou "planta" para criar objetos. Ela define as caracter√≠sticas (atributos) e os comportamentos (m√©todos) que os objetos daquela classe ter√£o. Pense em uma classe `Carro` que define que todo carro tem `cor`, `modelo` e pode `acelerar`.
        * **Objeto (Inst√¢ncia)**: √â uma realiza√ß√£o concreta de uma classe. Cada carro espec√≠fico (um Fiat Uno vermelho, um Tesla azul) seria um objeto da classe `Carro`.
        * **Atributos**: S√£o as vari√°veis que pertencem a uma classe ou objeto, representando suas caracter√≠sticas (ex: `cor`, `modelo` de um carro).
        * **M√©todos**: S√£o as fun√ß√µes que pertencem a uma classe ou objeto, representando seus comportamentos (ex: `acelerar()`, `frear()` de um carro).
        * **`self`**: √â o primeiro par√¢metro de qualquer m√©todo em uma classe Python. Ele referencia a pr√≥pria inst√¢ncia do objeto, permitindo acessar seus atributos e outros m√©todos. √â uma conven√ß√£o e √© crucial.
        * **`__init__` (M√©todo Construtor)**: Um m√©todo especial que √© automaticamente chamado quando um novo objeto (inst√¢ncia) da classe √© criado. √â usado para inicializar os atributos do objeto.

        **Pilares da POO (breve introdu√ß√£o):**
        * **Encapsulamento**: Agrupar dados (atributos) e m√©todos que operam sobre esses dados dentro de uma √∫nica unidade (a classe), controlando o acesso externo.
        * **Heran√ßa**: Permite que uma nova classe (subclasse) herde atributos e m√©todos de uma classe existente (superclasse), promovendo a reutiliza√ß√£o de c√≥digo.
        * **Polimorfismo**: A capacidade de objetos de diferentes classes responderem √† mesma mensagem (chamada de m√©todo) de maneiras diferentes.
        * **Abstra√ß√£o**: Focar nos aspectos essenciais de um objeto e esconder os detalhes complexos de implementa√ß√£o.

        **Por que usar POO?** Para programas maiores e mais complexos, a POO ajuda a gerenciar a complexidade, promover a reutiliza√ß√£o de c√≥digo e criar sistemas mais flex√≠veis e f√°ceis de escalar.
        """)
        st.code("""
# Definindo uma Classe 'Cachorro'
class Cachorro:
    # M√©todo construtor: chamado ao criar um novo objeto Cachorro
    def __init__(self, nome, raca, idade):
        self.nome = nome  # Atributo 'nome'
        self.raca = raca  # Atributo 'raca'
        self.idade = idade # Atributo 'idade'
        print(f"Um novo cachorro chamado {self.nome} foi criado!")

    # M√©todo para o cachorro latir
    def latir(self):
        return f"{self.nome} diz: Au au!"

    # M√©todo para o cachorro envelhecer
    def envelhecer(self):
        self.idade += 1
        return f"{self.nome} agora tem {self.idade} anos."

# Criando objetos (inst√¢ncias) da classe Cachorro
meu_cachorro = Cachorro("Buddy", "Golden Retriever", 3)
outro_cachorro = Cachorro("Luna", "Poodle", 1)

# Acessando atributos dos objetos
print(f"Meu cachorro √© um {meu_cachorro.raca} chamado {meu_cachorro.nome}.")
print(f"O outro cachorro √© uma {outro_cachorro.raca} de {outro_cachorro.idade} ano(s).")

# Chamando m√©todos dos objetos
print(meu_cachorro.latir())
print(outro_cachorro.latir())

# Alterando um atributo diretamente
meu_cachorro.idade = 4
print(f"Idade do {meu_cachorro.nome} foi atualizada para {meu_cachorro.idade}.")

# Usando o m√©todo para alterar o estado do objeto
print(outro_cachorro.envelhecer())
print(f"Nova idade de {outro_cachorro.nome}: {outro_cachorro.idade}")


# Exemplo de Heran√ßa
class Gato(Cachorro): # Gato herda de Cachorro
    def __init__(self, nome, raca, idade, cor_pelo):
        super().__init__(nome, raca, idade) # Chama o construtor da classe pai
        self.cor_pelo = cor_pelo # Atributo espec√≠fico de Gato

    def miar(self): # M√©todo espec√≠fico de Gato
        return f"{self.nome} diz: Miau!"

    # Exemplo de Polimorfismo: sobrescrevendo um m√©todo da classe pai
    def latir(self):
        return f"{self.nome} (o gato) tenta latir: Meow-au!"

meu_gato = Gato("Whiskers", "Siam√™s", 2, "Creme")
print(f"Meu gato √© um {meu_gato.raca} de {meu_gato.cor_pelo} chamado {meu_gato.nome}.")
print(meu_gato.miar())
print(meu_gato.latir()) # Apesar de herdar latir(), ele usa a vers√£o de Gato
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Nomes de classes come√ßam com letra mai√∫scula (`CamelCase`).
        * Defina atributos essenciais no construtor `__init__`.
        * Mantenha os m√©todos com uma √∫nica responsabilidade.
        * Use `super().__init__()` ao herdar para inicializar a classe pai.

        **Erro Comum:** Esquecer o `self` como primeiro par√¢metro dos m√©todos de inst√¢ncia, ou tentar acessar atributos de inst√¢ncia sem `self.`.
        """)
        st.write("---")

# --- Fun√ß√£o do M√≥dulo Avan√ßado ---
def modulo_avancado():
    st.header("M√≥dulo Avan√ßado: T√≥picos Essenciais e Aplica√ß√µes Reais")
    st.write("Este m√≥dulo cobre t√©cnicas avan√ßadas para tornar seus programas mais robustos, eficientes e interativos, al√©m de abordar conceitos cruciais para o desenvolvimento de aplica√ß√µes.")

    with st.expander("1. Tratamento de Erros (`try`/`except`/`finally`)", expanded=True):
        st.write("""
        Em programa√ß√£o, erros (ou exce√ß√µes) acontecem. Eles podem ser causados por entradas inv√°lidas do usu√°rio, arquivos que n√£o existem, problemas de rede, etc. Um programa bem constru√≠do n√£o "trava" quando um erro ocorre, mas sim **trata** a situa√ß√£o de forma elegante.

        O Python oferece o bloco `try-except-finally` para o tratamento de exce√ß√µes:
        * **`try`**: O c√≥digo que *pode* gerar um erro √© colocado dentro deste bloco.
        * **`except`**: Se um erro ocorrer no bloco `try`, o Python procura por um bloco `except` que corresponda ao tipo de erro. Se encontrar, o c√≥digo dentro deste `except` √© executado. Voc√™ pode ter m√∫ltiplos blocos `except` para diferentes tipos de erro, ou um `except` gen√©rico para capturar qualquer erro.
        * **`else`**: (Opcional) O c√≥digo dentro do `else` √© executado **somente** se o bloco `try` for executado com sucesso (sem nenhum erro).
        * **`finally`**: (Opcional) O c√≥digo dentro do `finally` √© **sempre** executado, independentemente de um erro ter ocorrido ou n√£o. √â ideal para tarefas de limpeza, como fechar arquivos ou conex√µes de banco de dados.

        **Por que s√£o importantes?** O tratamento de erros melhora a **robustez** e a **experi√™ncia do usu√°rio** do seu programa, evitando que ele crash e fornecendo feedback √∫til em caso de problemas.
        """)
        st.code("""
# Exemplo 1: Tratamento de divis√£o por zero
try:
    numero1 = float(st.text_input("Digite o primeiro n√∫mero (para divis√£o):", key="num1_div"))
    numero2 = float(st.text_input("Digite o segundo n√∫mero (para divis√£o):", key="num2_div"))
    
    # Valida√ß√£o adicional para evitar ValueError se o input for vazio
    if not st.session_state.get("num1_div") or not st.session_state.get("num2_div"):
        st.info("Digite ambos os n√∫meros para ver o resultado da divis√£o.")
    else:
        resultado = numero1 / numero2
        st.success(f"Resultado da divis√£o: {resultado}")
except ValueError:
    st.error("Erro: Por favor, digite apenas n√∫meros v√°lidos.")
except ZeroDivisionError:
    st.error("Erro: N√£o √© poss√≠vel dividir por zero!")
except Exception as e: # Captura qualquer outro erro inesperado
    st.error(f"Ocorreu um erro inesperado: {e}")
finally:
    st.info("Opera√ß√£o de divis√£o finalizada (bloco finally).")

st.write("---")

# Exemplo 2: Tratamento de arquivo n√£o encontrado
st.subheader("Simula√ß√£o de Leitura de Arquivo")
st.write("Este exemplo simula a leitura de um arquivo. Tente com um nome que n√£o existe, como 'meu_arquivo_inexistente.txt'.")
nome_arquivo = st.text_input("Nome do arquivo para tentar ler (ex: 'dados.txt'):", key="file_name_input")

if st.button("Tentar Ler Arquivo", key="read_file_btn"):
    if not nome_arquivo:
        st.warning("Por favor, digite um nome de arquivo.")
    else:
        try:
            with open(nome_arquivo, 'r') as f: # Tenta abrir o arquivo no modo leitura
                conteudo = f.read()
                st.code(f"Conte√∫do de '{nome_arquivo}':\\n{conteudo}")
        except FileNotFoundError:
            st.error(f"Erro: O arquivo '{nome_arquivo}' n√£o foi encontrado. Certifique-se de que ele existe e o caminho est√° correto.")
        except IOError: # Erros de entrada/sa√≠da mais gen√©ricos
            st.error(f"Erro de I/O ao tentar ler '{nome_arquivo}'.")
        except Exception as e:
            st.error(f"Ocorreu um erro inesperado: {e}")
        finally:
            st.info("Tentativa de leitura de arquivo conclu√≠da.")

# Para testar o FileNotFoundError, voc√™ pode criar um arquivo tempor√°rio:
# with open("dados.txt", "w") as f:
#    f.write("Linha 1\\nLinha 2")
# E depois apagar para testar o erro.
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Seja espec√≠fico nos blocos `except`: capture os tipos de exce√ß√£o que voc√™ espera (ex: `ValueError`, `FileNotFoundError`) para lidar com eles de forma adequada.
        * Evite um `except` gen√©rico (`except Exception as e:`) a menos que voc√™ queira pegar *todos* os erros e registrar/exibir a mensagem para depura√ß√£o.
        * Use o bloco `finally` para garantir que recursos (arquivos, conex√µes) sejam fechados ou liberados, mesmo que um erro ocorra.

        **Erro Comum:** N√£o tratar erros, fazendo com que o programa "quebre" (crash) para o usu√°rio, ou usar um `except` muito gen√©rico que esconde problemas reais de l√≥gica.
        """)
        st.write("---")

    with st.expander("2. Manipula√ß√£o de Arquivos"):
        st.write("""
        Interagir com arquivos √© uma funcionalidade fundamental para a maioria dos programas, permitindo que eles salvem dados, carreguem configura√ß√µes ou processem informa√ß√µes persistentes. Em Python, a manipula√ß√£o de arquivos √© feita principalmente com a fun√ß√£o `open()`.

        **Modos de Abertura:**
        * `'r'` (read): Abre o arquivo para leitura. √â o modo padr√£o. O arquivo deve existir, caso contr√°rio, `FileNotFoundError` ser√° levantado.
        * `'w'` (write): Abre o arquivo para escrita. Se o arquivo n√£o existir, um novo √© criado. **Cuidado**: Se o arquivo j√° existir, **seu conte√∫do ser√° TRUNCADO (apagado)!**
        * `'a'` (append): Abre o arquivo para escrita no final (ap√™ndice). Se o arquivo n√£o existir, um novo √© criado. Se existir, o novo conte√∫do √© adicionado ao final do arquivo, sem apagar o que j√° est√° l√°.
        * `'x'` (exclusive creation): Cria um novo arquivo para escrita. Se o arquivo j√° existir, levanta um `FileExistsError`.
        * `'t'` (text): Modo texto (padr√£o). Usado para lidar com strings.
        * `'b'` (binary): Modo bin√°rio. Usado para lidar com bytes (imagens, v√≠deos, execut√°veis).

        **Context Manager (`with open(...) as ...`)**:
        √â a forma **recomendada** de manipular arquivos em Python. Ele garante que o arquivo seja automaticamente fechado, mesmo que ocorra um erro durante a opera√ß√£o, evitando vazamentos de recursos.

        **Leitura:**
        * `f.read()`: L√™ todo o conte√∫do do arquivo como uma √∫nica string.
        * `f.readline()`: L√™ uma √∫nica linha do arquivo.
        * `f.readlines()`: L√™ todas as linhas do arquivo em uma lista de strings.
        * Iterar sobre o objeto arquivo (`for linha in f:`): A forma mais eficiente de ler arquivos linha por linha, especialmente para arquivos grandes.

        **Escrita:**
        * `f.write(string)`: Escreve uma string no arquivo. N√£o adiciona quebras de linha automaticamente.
        * `f.writelines(lista_de_strings)`: Escreve uma lista de strings no arquivo. Tamb√©m n√£o adiciona quebras de linha automaticamente, ent√£o inclua `\\n` nas suas strings, se desejar.

        **Por que s√£o importantes?** A manipula√ß√£o de arquivos √© fundamental para persistir dados, ler configura√ß√µes, gerar relat√≥rios e interagir com o sistema de arquivos do computador.
        """)
        st.code("""
import os # M√≥dulo para interagir com o sistema operacional (ex: verificar se arquivo existe)

# --- Exemplo de Escrita em Arquivo (Modo 'w') ---
st.subheader("Escrevendo em um Arquivo (Modo 'w')")
st.write("Isso ir√° criar ou sobrescrever o arquivo 'exemplo_escrita.txt'.")
conteudo_para_escrever = st.text_area("Conte√∫do para o arquivo 'exemplo_escrita.txt':", 
                                        "Linha 1: Ol√° Python!\nLinha 2: Streamlit √© legal.", 
                                        key="write_content")
if st.button("Escrever no Arquivo (Sobrescrever)", key="write_file_btn"):
    try:
        with open("exemplo_escrita.txt", "w") as f:
            f.write(conteudo_para_escrever)
        st.success("Conte√∫do gravado com sucesso em 'exemplo_escrita.txt'!")
    except IOError as e:
        st.error(f"Erro de I/O ao escrever: {e}")

# --- Exemplo de Leitura de Arquivo (Modo 'r') ---
st.subheader("Lendo de um Arquivo (Modo 'r')")
st.write("Tente ler o arquivo que voc√™ acabou de criar ou um que j√° exista.")
nome_arquivo_leitura = st.text_input("Nome do arquivo para ler:", "exemplo_escrita.txt", key="read_file_name")

if st.button("Ler Arquivo", key="read_file_btn_2"):
    if not os.path.exists(nome_arquivo_leitura):
        st.warning(f"O arquivo '{nome_arquivo_leitura}' n√£o existe. Crie-o primeiro ou digite um nome v√°lido.")
    else:
        try:
            with open(nome_arquivo_leitura, "r") as f:
                conteudo_lido = f.read()
                st.info(f"Conte√∫do de '{nome_arquivo_leitura}':")
                st.code(conteudo_lido)
        except Exception as e:
            st.error(f"Ocorreu um erro ao ler o arquivo: {e}")

# --- Exemplo de Adicionar Conte√∫do (Modo 'a') ---
st.subheader("Adicionando Conte√∫do a um Arquivo (Modo 'a')")
st.write("Isso adicionar√° uma nova linha ao arquivo 'exemplo_escrita.txt'.")
conteudo_para_adicionar = st.text_input("Conte√∫do para adicionar:", "Nova linha adicionada em " + time.ctime(), key="append_content")
if st.button("Adicionar ao Arquivo", key="append_file_btn"):
    try:
        with open("exemplo_escrita.txt", "a") as f:
            f.write("\\n" + conteudo_para_adicionar) # Adiciona uma quebra de linha antes
        st.success("Conte√∫do adicionado com sucesso a 'exemplo_escrita.txt'!")
    except IOError as e:
        st.error(f"Erro de I/O ao adicionar: {e}")

st.write("---")
""")
        st.write("""
        **Melhores Pr√°ticas:**
        * Sempre use o `with open(...)` para garantir que os arquivos sejam fechados corretamente.
        * Escolha o modo de abertura (`'r'`, `'w'`, `'a'`) com cuidado, especialmente `'w'` que pode apagar dados.
        * Lembre-se que `write()` n√£o adiciona quebras de linha (`\\n`). Adicione-as manualmente se precisar.
        * Para arquivos grandes, leia linha por linha (`for linha in f:`) em vez de carregar tudo com `f.read()` para economizar mem√≥ria.

        **Erro Comum:** `FileNotFoundError` ao tentar ler um arquivo que n√£o existe, ou sobrescrever acidentalmente um arquivo importante usando o modo `'w'`.
        """)
        st.write("---")

    st.subheader("Exerc√≠cio Interativo: Contador de Palavras")
    st.write("Cole um texto abaixo e descubra quantas palavras √∫nicas ele cont√©m. Este exerc√≠cio usa manipula√ß√£o de strings, conjuntos e tratamento de erros.")
    
    texto_para_contar = st.text_area("Cole seu texto aqui:", key="text_counter_input")
    
    if st.button("Contar Palavras √önicas", key="count_words_btn"):
        if not texto_para_contar:
            st.warning("Por favor, cole algum texto para contar as palavras.")
        else:
            try:
                # Converte para min√∫sculas e remove pontua√ß√µes para melhor contagem
                texto_limpo = texto_para_contar.lower()
                
                # Poder√≠amos usar uma express√£o regular, mas para simplificar:
                # Remove caracteres n√£o alfanum√©ricos e substitui por espa√ßo
                for char in '.,;!?:()"':
                    texto_limpo = texto_limpo.replace(char, ' ')
                
                palavras = texto_limpo.split() # Divide em palavras usando espa√ßos
                
                # Usa um conjunto para obter palavras √∫nicas
                palavras_unicas = set(palavras)
                
                st.success(f"Seu texto cont√©m **{len(palavras_unicas)}** palavras √∫nicas.")
                st.write("As palavras √∫nicas s√£o:", sorted(list(palavras_unicas))) # Exibe ordenado
            except Exception as e:
                st.error(f"Ocorreu um erro ao processar o texto: {e}")
    st.write("---")

# --- Estrutura Principal do Aplicativo Streamlit ---
if __name__ == "__main__":
    st.title("üêç Curso de Python Interativo")
    st.markdown("Bem-vindo(a) ao curso aprofundado de Python! Selecione um m√≥dulo no menu lateral para come√ßar ou continuar sua jornada.")

    st.sidebar.title("üìö M√≥dulos do Curso")
    modulo_selecionado = st.sidebar.radio(
        "Navegue pelos t√≥picos:",
        ("Introdu√ß√£o", "M√≥dulo B√°sico", "M√≥dulo Intermedi√°rio", "M√≥dulo Avan√ßado"),
        key="main_navigation"
    )

    if modulo_selecionado == "Introdu√ß√£o":
        st.write("Use o menu ao lado para explorar os diferentes m√≥dulos do curso. Cada m√≥dulo cont√©m explica√ß√µes, exemplos de c√≥digo e exerc√≠cios interativos para praticar seus conhecimentos.")
        st.image("https://www.python.org/static/community_logos/python-powered-h-140x182.png", width=200) # Exemplo de imagem
        st.write("Desenvolvido com ‚ù§Ô∏è e Streamlit.")
    elif modulo_selecionado == "M√≥dulo B√°sico":
        modulo_basico()
    elif modulo_selecionado == "M√≥dulo Intermedi√°rio":
        modulo_intermediario()
    elif modulo_selecionado == "M√≥dulo Avan√ßado":
        modulo_avancado()

    # Mensagem de depura√ß√£o no terminal (vis√≠vel apenas onde voc√™ rodou 'streamlit run')
    print(f"M√≥dulo '{modulo_selecionado}' selecionado e carregado.")
